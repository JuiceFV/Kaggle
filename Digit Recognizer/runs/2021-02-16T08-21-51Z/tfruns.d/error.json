{
  "message": "cnn_model.R:58:3: unexpected symbol\n57:   flag_numeric(\"dropout\", 0.5)\n58:   flag_numeric\n      ^",
  "traceback": ["source(file = file, local = envir, echo = echo, encoding = encoding)", "withCallingHandlers({\n    source(file = file, local = envir, echo = echo, encoding = encoding)\n    write_run_property(\"completed\", TRUE)\n}, error = function(e) {\n    write_run_metadata(\"error\", list(message = e$message, traceback = capture_stacktrace(sys.calls())))\n    stop(e)\n})", "force(expr)", "with_changed_file_copy(getwd(), run_dir, {\n    write_run_property(\"script\", basename(file))\n    write_run_property(\"start\", as.double(Sys.time()))\n    on.exit(write_run_property(\"end\", as.double(Sys.time())), \n        add = TRUE)\n    on.exit(clear_run(), add = TRUE)\n    on.exit(reset_tf_graph(), add = TRUE)\n    old_width <- getOption(\"width\")\n    options(width = min(100, old_width))\n    on.exit(options(width = old_width), add = TRUE)\n    properties_dir <- file.path(meta_dir(run_dir), \"properties\")\n    output_file <- file(file.path(properties_dir, \"output\"), \n        open = \"wt\", encoding = \"UTF-8\")\n    sink(file = output_file, type = \"output\", split = TRUE)\n    on.exit({\n        sink(type = \"output\")\n        close(output_file)\n    }, add = TRUE)\n    plots_dir <- file.path(run_dir, \"plots\")\n    if (!utils::file_test(\"-d\", plots_dir)) \n        dir.create(plots_dir, recursive = TRUE)\n    png_args <- list(filename = file.path(plots_dir, \"Rplot%03d.png\"), \n        width = 1200, height = 715, res = 192)\n    if (is_windows() && capabilities(\"cairo\")) \n        png_args$type <- \"cairo\"\n    do.call(grDevices::png, png_args)\n    dev_number <- grDevices::dev.cur()\n    on.exit(grDevices::dev.off(dev_number), add = TRUE)\n    message(\"Using run directory \", run_dir)\n    write_run_property(\"completed\", FALSE)\n    withCallingHandlers({\n        source(file = file, local = envir, echo = echo, encoding = encoding)\n        write_run_property(\"completed\", TRUE)\n    }, error = function(e) {\n        write_run_metadata(\"error\", list(message = e$message, \n            traceback = capture_stacktrace(sys.calls())))\n        stop(e)\n    })\n})", "do_training_run(file, run_dir, echo = echo, envir = envir, encoding = encoding)", "training_run(file = file, config = config, flags = flags, properties = properties, \n    run_dir = NULL, echo = echo, view = FALSE, envir = new.env(parent = envir), \n    encoding = encoding)", "tuning_run(file = \"cnn_model.R\", flags = list(dropout = c(0.2, \n    0.3, 0.4, 0.5), lambda = c(0.001, 1e-04, 3e-05)))", "eval(expr, envir, enclos)", "eval(expr, envir, enclos)", "withVisible(eval(expr, envir, enclos))", "withCallingHandlers(withVisible(eval(expr, envir, enclos)), warning = wHandler, \n    error = eHandler, message = mHandler)", "doTryCatch(return(expr), name, parentenv, handler)", "tryCatchOne(expr, names, parentenv, handlers[[1L]])", "tryCatchList(expr, classes, parentenv, handlers)", "tryCatch(expr, error = function(e) {\n    call <- conditionCall(e)\n    if (!is.null(call)) {\n        if (identical(call[[1L]], quote(doTryCatch))) \n            call <- sys.call(-4L)\n        dcall <- deparse(call)[1L]\n        prefix <- paste(\"Error in\", dcall, \": \")\n        LONG <- 75L\n        sm <- strsplit(conditionMessage(e), \"\\n\")[[1L]]\n        w <- 14L + nchar(dcall, type = \"w\") + nchar(sm[1L], type = \"w\")\n        if (is.na(w)) \n            w <- 14L + nchar(dcall, type = \"b\") + nchar(sm[1L], \n                type = \"b\")\n        if (w > LONG) \n            prefix <- paste0(prefix, \"\\n  \")\n    }\n    else prefix <- \"Error : \"\n    msg <- paste0(prefix, conditionMessage(e), \"\\n\")\n    .Internal(seterrmessage(msg[1L]))\n    if (!silent && isTRUE(getOption(\"show.error.messages\"))) {\n        cat(msg, file = outFile)\n        .Internal(printDeferredWarnings())\n    }\n    invisible(structure(msg, class = \"try-error\", condition = e))\n})", "try(f, silent = TRUE)", "handle(ev <- withCallingHandlers(withVisible(eval(expr, envir, \n    enclos)), warning = wHandler, error = eHandler, message = mHandler))", "timing_fn(handle(ev <- withCallingHandlers(withVisible(eval(expr, \n    envir, enclos)), warning = wHandler, error = eHandler, message = mHandler)))", "evaluate_call(expr, parsed$src[[i]], envir = envir, enclos = enclos, \n    debug = debug, last = i == length(out), use_try = stop_on_error != \n        2L, keep_warning = keep_warning, keep_message = keep_message, \n    output_handler = output_handler, include_timing = include_timing)", "evaluate(request$content$code, envir = .GlobalEnv, output_handler = oh, \n    stop_on_error = 1L)", "doTryCatch(return(expr), name, parentenv, handler)", "tryCatchOne(expr, names, parentenv, handlers[[1L]])", "tryCatchList(expr, names[-nh], parentenv, handlers[-nh])", "doTryCatch(return(expr), name, parentenv, handler)", "IRkernel::main()"]
}
